//Jenkinsfile (Declarative Pipeline)
STAGENAME = "dev"

stage('E2E Tests') {
    timeout(time: 2, unit: 'DAYS') {
        input message: '==> start E2E tests?'
    }
    node('') {
        selectStage(STAGENAME)

        //build and start sakuli tests
        ocSakuliBuild('sakuli-selenium-tests')
        ocRunSakuliTest('sakuli-selenium-tests', 'selenium-all')

//        parallel blueberry: {
//            ocRunSakuliTest('blueberry')
//        }, orderpdf: {
//            ocRunSakuliTest('order-pdf')
//        }, chocolate: {
//            ocRunSakuliTest('chocolate')
//        }, caramel: {
//            ocRunSakuliTest('caramel')
//        }
    }
}

private void ocSakuliBuild(String component) {
    stage("build ${component} image") {
        sh "STAGE=${STAGENAME} openshift/${component}/create_sakuli-test.sh build"
    }
}


private void ocRunSakuliTest(String component, String testname) {
    stage("start ${component}") {
        def statusCode = sh script: "STAGE=${STAGENAME} openshift/${component}/create_sakuli-test.sh ${testname}", returnStatus: true
        printf("Sakuli finished with error code: $statusCode")

        if (statusCode == 0) {
            echo "Sakuli E2E test $component was sucessful!"
        } else if (statusCode > 0 && statusCode < 6) {
            printf("Sakuli has exceeded warning/critical times in test $component (build marked UNSTABLE)")
            currentBuild.result = 'UNSTABLE'
        } else {
            error "Sakuli have found some errors in test $component!"
        }
    }
}

private void selectStage(String stagename) {
    sh "oc project ta-pipeline-${stagename}"
}


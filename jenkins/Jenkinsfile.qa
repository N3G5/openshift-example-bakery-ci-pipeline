//Jenkinsfile (Declarative Pipeline)
skip = true
STAGENAME = "qa"

stage('prepare build environment') {
    //check ENV
    node() {
        if ("${NEXUS_HOST}" == '') {
            errors "No Nexus Repository defined! check environment variable 'NEXUS_HOST'"
        }
        printf("-------------- Using NEXUS_HOST=${NEXUS_HOST}")
    }
}

stage('deploy QA system') {
    node('') {
        selectStage(STAGENAME)
        checkout scm
        parallel activemq: {
            ocBakeryDeploy("activemq")
        }, web: {
            ocBakeryDeploy('bakery-web-server')
        }, report: {
            ocBakeryDeploy('bakery-report-server')
        }, workers: {
            ocBakeryDeploy('bakery-workers')
        }
    }
}

stage('citrus integration tests') {
    timeout(time: 2, unit: 'DAYS') {
        input message: '==> start citrus integration tests?'
    }
    node('') {
        selectStage(STAGENAME)

        stage('deploy wait-server') {
            sh "STAGE=${STAGENAME} openshift/helper/create_wait-server.sh"
        }

        stage('run citrus tests') {
            ocCitrusJenkinsSlave()
        }

        //use default maven node (old-solution)
        //stage('run citrus tests') {
        //    ocCitrusTests("citrus-tests")
        //}
    }
}

stage('sakuli E2E tests') {
    timeout(time: 2, unit: 'DAYS') {
        input message: '==> start sakuli E2E tests?'
    }
    node('') {
        selectStage(STAGENAME)

        //build and start sakuli tests
        ocSakuliBuild('sakuli-test')
        parallel blueberry: {
            ocRunSakuliTest('blueberry')
        }, orderpdf: {
            ocRunSakuliTest('order-pdf')
        }, chocolate: {
            ocRunSakuliTest('chocolate')
        }, caramel: {
            ocRunSakuliTest('caramel')
        }
    }
}
stage('Trigger PROD') {
    timeout(time: 2, unit: 'DAYS') {
        input message: '==> deploy PROD system?'
    }
    node('') {
        ocstage(STAGENAME, "prod")

        //use dev jenkins
        selectStage("dev")
        //delete qa staqe
        sh "openshift/delete-deployment-pipeline.sh qa"
        //trigger next build pipeline
        sh "openshift/create-build-pipeline.sh prod"
    }
}

private void selectStage(String stagename) {
    sh "oc project ta-pipeline-${stagename}"
}

private void ocBakeryDeploy(String component) {
    stage("deploy ${component}") {
        try {
            sh "openshift/bakery-app/create_${component}.sh delete"
            sh "echo 'wait 10 sec. ...' && sleep 10"
        } catch (e) {
            printf("only housekeeping, do nonting: %s", e.toString())
        }
        sh "openshift/bakery-app/create_${component}.sh"
    }
}

/**
 * Custom wrapper for executing the commands in a citrus-slave-image:
 * See: https://github.com/citrusframework/citrus-docker-images/pull/3
 *
 */
private void ocCitrusJenkinsSlave() {
    podTemplate(label: "citrus",
            cloud: "openshift",
            inheritFrom: "maven",
            containers: [
                    containerTemplate(name: "jnlp",
                            image: "toschneck/citrus-jenkins-slave",
                    )
            ])
            {
                node('citrus') {
                    sh "echo execute oc citrus build"
                    checkout scm
                    sh "citrus-tests/maven-build.sh ${NEXUS_HOST}"
                    junit 'citrus-tests/target/citrus-reports/**/*.xml'
                    archiveArtifacts "citrus-tests/target/citrus-*/**/*"
                }
            }
}

private void ocCitrusTests(String component) {
    node('maven') {
        sh "echo execute oc citrus build"
        checkout scm
        sh "citrus-tests/maven-build.sh ${NEXUS_HOST}"
    }
}

private void ocSakuliBuild(String component) {
    stage("build ${component} image") {
        sh "STAGE=${STAGENAME} openshift/sakuli-tests/create_${component}.sh build"
    }
}

private void ocRunSakuliTest(String component) {
    stage("start ${component}") {
        def statusCode = sh script: "STAGE=${STAGENAME} openshift/sakuli-tests/create_sakuli-test.sh ${component}", returnStatus: true
        printf("Sakuli finished with error code: $statusCode")

        if (statusCode == 0) {
            echo "Sakuli E2E test $component was sucessful!"
        } else if (statusCode > 0 && statusCode < 6) {
            printf("Sakuli has exceeded warning/critical times in test $component (build marked UNSTABLE)")
            currentBuild.result = 'UNSTABLE'
        } else {
            error "Sakuli have found some errors in test $component!"
        }
    }
}

private void ocstage(String src, String dest) {
    sh "openshift/bakery-app/stage-images.sh ${src} ${dest} bakery-report-server:latest"
    sh "openshift/bakery-app/stage-images.sh ${src} ${dest} bakery-web-server:latest"
    sh "openshift/bakery-app/stage-images.sh ${src} ${dest} bakery-worker:latest"
}

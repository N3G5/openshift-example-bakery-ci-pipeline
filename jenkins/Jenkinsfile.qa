//Jenkinsfile (Declarative Pipeline)
skip = true
// global var for get internal registry
String gIMAGE_PREFIX = "not-defined"
STAGENAME = "qa"

stage('deploy QA system') {
    node('') {
        selectStage(STAGENAME)
        checkout scm
        parallel activemq: {
            ocBakeryDeploy("activemq")
        }, web: {
            ocBakeryDeploy('bakery-web-server')
        }, report: {
            ocBakeryDeploy('bakery-report-server')
        }, workers: {
            ocBakeryDeploy('bakery-workers')
        }
    }
}

stage('Integration Tests') {
    timeout(time: 2, unit: 'DAYS') {
        input message: '==> start Integration tests?'
    }
    node('') {
        selectStage(STAGENAME)

        ocWaitServerBuild('wait-server')
        stage('deploy wait-server') {
            sh "STAGE=${STAGENAME} openshift/sakuli-tests/create_wait-server.sh"
        }

        stage('deploy citrus tests') {
            ocCitrusTests("citrus-tests")
        }
    }
}

stage('E2E Tests') {
    timeout(time: 2, unit: 'DAYS') {
        input message: '==> start E2E tests?'
    }
    node('') {
        //check ENV
        node() {
            gIMAGE_PREFIX = sh(script: 'echo ${IMAGE_REG}/openshift-day-qa', returnStdout: true)
            if (gIMAGE_PREFIX == "not-defined") {
                errors "Environment varibale 'IMAGE_PREFIX' not specified correctly!"
            }
            sh("echo -------------- Using IMAGE_PREFIX=${gIMAGE_PREFIX}")
        }
        selectStage(STAGENAME)

        //build and start sakuli tests
        ocSakuliBuild('sakuli-test')
        parallel blueberry: {
            ocSakuliDeploy('chocolate')
        }, orderpdf: {
            ocSakuliDeploy('order-pdf')
        }, chocolate: {
//        parallel chocolate: {
            ocSakuliDeploy('blueberry')
        }, caramel: {
            ocSakuliDeploy('caramel')
        }
    }
}

stage('Trigger PROD') {
    timeout(time: 2, unit: 'DAYS') {
        input message: '==> deploy PROD system?'
    }
    node('') {
        ocstage(STAGENAME, "prod")

        //use dev jenkins
        selectStage("dev")
        //delete qa staqe
        sh "openshift/delete-deployment-pipeline.sh qa"
        //trigger next build pipeline
        sh "openshift/create-build-pipeline.sh prod"
    }
}


private void ocBakeryDeploy(String component) {
    stage("deploy ${component}") {
        try {
            sh "openshift/bakery-app/create_${component}.sh delete"
        } catch (e) {
            printf("only housekeeping, do nonting: %s", e.toString())
        }
        sh "openshift/bakery-app/create_${component}.sh"
    }
}

private void ocSakuliBuild(String component) {
    stage("build ${component} image") {
        sh "STAGE=${STAGENAME} openshift/sakuli-tests/create_${component}.sh build"
    }
}

private void ocWaitServerBuild(String component) {
    stage("build ${component} image") {
        sh "STAGE=${STAGENAME} openshift/sakuli-tests/create_${component}.sh build"
    }
}

private void ocCitrusTests(String component) {
    node('maven') {
        sh "echo execute oc citrus build"
//            sh "mvn -f citrus-tests/pom.xml -Dos.cluster.postfix=-openshift-day-qa.10.0.100.201.xip.io verify"
        sh "mvn -f citrus-tests/pom.xml verify"
    }
}

private void ocSakuliDeploy(String component) {
    stage("start ${component}") {
        sh "STAGE=${STAGENAME} openshift/sakuli-tests/create_sakuli-test.sh ${component}"
    }
}

private void selectStage(String stagename) {
    sh "oc project openshift-day-${stagename}"
}

private void ocstage(String src, String dest) {
    sh "openshift/bakery-app/stage-images.sh ${src} ${dest} bakery-report-server:latest"
    sh "openshift/bakery-app/stage-images.sh ${src} ${dest} bakery-web-server:latest"
    sh "openshift/bakery-app/stage-images.sh ${src} ${dest} bakery-worker:latest"
}

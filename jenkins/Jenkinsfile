//Jenkinsfile (Declarative Pipeline)
skip = false
// global var for routing nexus-repository through the script
def gNEXUS_HOST= "not-defined"

stage('build maven artifacts') {
    node(){
        gNEXUS_HOST = sh(script: 'echo $NEXUS_HOST', returnStdout: true)
        if (gNEXUS_HOST == "not-defined"){
            errors "Environment varibale 'NEXUS_HOST' not specified correctly!"
        }
        sh("echo -------------- Using NEXUS_HOST=${gNEXUS_HOST}")
    }
    node('maven') {
        try {
            sh("echo -------------- Using NEXUS_HOST=${gNEXUS_HOST}")
            checkout scm
            if (!skip) {
                sh "NEXUS_HOST=${gNEXUS_HOST} mvn -B -s openshift/infrastructur/maven-cd-settings.xml -f bakery-app/worker/pom.xml deploy"
            }
        }
        finally {
            printf("Validate Unit-Test")
//            junit 'bakery-app/**/*.xml'
        }
    }
}
stage('build docker images') {
    timeout(time: 2, unit: 'DAYS') {
        input message: '==> build images?'
    }
    node('maven') {
        // need node maven because of which not installed in master
        parallel web: {
            ocBakeryBuild('bakery-web-server')
        }, report: {
            ocBakeryBuild('bakery-report-server')
        }, worker: {
            ocBakeryBuild('bakery-workers')
        }
    }
}

stage('deploy DEV system') {
    timeout(time: 2, unit: 'DAYS') {
        input message: '==> deploy DEV system?'
    }
    parallel web: {
        ocBakeryDeploy('bakery-web-server')
    }, report: {
        ocBakeryDeploy('bakery-report-server')
    }, worker: {
        ocBakeryDeploy('bakery-workers')
    }, activemq: {
        ocBakeryDeploy("activemq")
    }

}
stage('Test') {
}


private void ocBakeryBuild(String component) {
    stage("build ${component} image") {
//        node('maven') {
            checkout scm
            sh "openshift/bakery-app/create_${component}.sh build"
//        }
    }
}
private void ocBakeryDeploy(String component) {
    stage("deploy ${component}") {
        node('') {
//            checkout scm
            try {
                sh "openshift/bakery-app/create_${component}.sh delete;"
            } catch (e){
                printf("only housekeeping, do nonting: %s", e.toString())
            }
            sh "openshift/bakery-app/create_${component}.sh"
        }
    }
}

/*

stage('QA') {
    timeout(time: 2, unit: 'DAYS') {
        input message: 'Do you want to deploy into Prod?'
    }
}
stage('Prod') {
        node {
            dir ("${MODULE_PATH}/infra") {
                sh "./create_module_prod.sh"
                sh "./stage_build.sh qa prod";
            }
        }
}
*/


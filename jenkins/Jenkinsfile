//Jenkinsfile (Declarative Pipeline)
skip = true
def NEXUS_HOST = sh(script: 'echo $NEXUS_HOST', returnStdout: true)
stage('build maven artifacts') {
    node(){
        printf("ENV_PROFILE=${NEXUS_HOST}")
        sh('echo sh: ENV_PROFILE=${NEXUS_HOST}')
        sh("echo sh: ENV_PROFILE=${NEXUS_HOST}")
    }
    node('maven') {
        try {
            checkout scm
            printf("ENV_PROFILE=${NEXUS_HOST}")
            sh('echo sh: ENV_PROFILE=${NEXUS_HOST}')
            sh("echo sh: ENV_PROFILE=${NEXUS_HOST}")
            if (!skip) {
                sh "mvn -B -s openshift/infrastructur/maven-cd-settings.xml -P ${NEXUS_HOST} -f bakery-app/worker/pom.xml deploy"
            }
        }
        finally {
            printf("Validate Unit-Test")
//            junit 'bakery-app/**/*.xml'
        }
    }
}
//stage('build docker images') {
////    timeout(time: 2, unit: 'DAYS') {
////        input message: '==> build images?'
////    }
//    // need node maven because of which not installed in master
//    parallel web: {
//        ocBakeryBuild('bakery-web-server')
//    }, report: {
//        ocBakeryBuild('bakery-report-server')
//    }, worker: {
//        ocBakeryBuild('bakery-workers')
//    }
//}
//
//stage('deploy DEV system') {
//    timeout(time: 2, unit: 'DAYS') {
//        input message: '==> deploy DEV system?'
//    }
//    parallel web: {
//        ocBakeryDeploy('bakery-web-server')
//    }, report: {
//        ocBakeryDeploy('bakery-report-server')
//    }, worker: {
//        ocBakeryDeploy('bakery-workers')
//    }, activemq: {
//        ocBakeryDeploy("activemq")
//    }
//
//}
//stage('Test') {
//}


private void ocBakeryBuild(String component) {
    stage("build ${component} image") {
        node('maven') {
            checkout scm
            sh "openshift/bakery-app/create_${component}.sh build"
        }
    }
}
private void ocBakeryDeploy(String component) {
    stage("deploy ${component}") {
        node('maven') {
            checkout scm
            try {
                sh "openshift/bakery-app/create_${component}.sh delete;"
            } catch (e){
                printf("only housekeeping, do nonting: %s", e.toString())
            }
            sh "openshift/bakery-app/create_${component}.sh"
        }
    }
}

/*

stage('QA') {
    timeout(time: 2, unit: 'DAYS') {
        input message: 'Do you want to deploy into Prod?'
    }
}
stage('Prod') {
        node {
            dir ("${MODULE_PATH}/infra") {
                sh "./create_module_prod.sh"
                sh "./stage_build.sh qa prod";
            }
        }
}
*/


//Jenkinsfile (Declarative Pipeline)
skip = true
// global var for routing nexus-repository through the script
String gNEXUS_HOST = "not-defined"

stage('build maven artifacts') {
    //check ENV
    node() {
        gNEXUS_HOST = sh(script: 'echo $NEXUS_HOST', returnStdout: true)
        if (gNEXUS_HOST == "not-defined") {
            errors "Environment varibale 'NEXUS_HOST' not specified correctly!"
        }
        sh("echo -------------- Using NEXUS_HOST=${gNEXUS_HOST}")
    }

    //artifact builds
    node('maven') {
        try {
            sh("echo -------------- Using NEXUS_HOST=${gNEXUS_HOST}")
            checkout scm
            if (!skip) {
                sh "openshift/bakery-app/maven-build.sh ${gNEXUS_HOST}"
            } else {
                printf("Skipped maven build!!!")
            }
        }
        finally {
            printf("Validate Unit-Test")
//            junit 'bakery-app/**/*.xml'
        }
    }
}

stage('build docker images') {
//    timeout(time: 2, unit: 'DAYS') {
//        input message: '==> build images?'
//    }
    node() {
        checkout scm
        parallel web: {
            ocBakeryBuild('bakery-web-server')
        }, report: {
            ocBakeryBuild('bakery-report-server')
        }, worker: {
            ocBakeryBuild('bakery-workers')
        }
    }
}

stage('deploy DEV system') {
    timeout(time: 2, unit: 'DAYS') {
        input message: '==> deploy DEV system?'
    }
    node('') {
        ocBakeryDeploy('bakery-web-server')
        ocBakeryDeploy('bakery-report-server')
        ocBakeryDeploy('bakery-workers')
        ocBakeryDeploy("activemq")
    }
}
stage('Test') {
    timeout(time: 2, unit: 'DAYS') {
        input message: '==> start E2E tests system?'
    }
    node('') {
        parallel sakulibuild: {
            ocSakuliBuild('sakuli-test')
        }, waitserver: {
            ocSakuliBuild('wait-server')
        }
        sh "openshift/sakuli-tests/create_wait-server.sh"
        ocSakuliDeploy('blueberry')
        ocSakuliDeploy('caramel')
        ocSakuliDeploy('chocolate')
        ocSakuliDeploy('order-pdf')
    }
}

stage('deploy QA system') {
    timeout(time: 2, unit: 'DAYS') {
        input message: '==> deploy QA system?'
    }
    node('') {
        sh "oc project openshift-day-qa"
        ocBakeryDeploy('bakery-web-server')
        ocBakeryDeploy('bakery-report-server')
        ocBakeryDeploy('bakery-workers')
        ocBakeryDeploy("activemq")
    }
}

private void ocBakeryBuild(String component) {
    stage("build ${component} image") {
        sh "openshift/bakery-app/create_${component}.sh build"
    }
}

private void ocBakeryDeploy(String component) {
    stage("deploy ${component}") {
        try {
            sh "openshift/bakery-app/create_${component}.sh delete;"
        } catch (e) {
            printf("only housekeeping, do nonting: %s", e.toString())
        }
        sh "openshift/bakery-app/create_${component}.sh"
    }
}

private void ocSakuliBuild(String component) {
    stage("build ${component} image") {
        sh "openshift/sakuli-tests/create_${component}.sh build"
    }
}

private void ocSakuliDeploy(String component) {
    stage("start ${component}") {
        sh "openshift/sakuli-tests/create_sakuli-test.sh ${component}"
    }
}

/*

stage('QA') {
    timeout(time: 2, unit: 'DAYS') {
        input message: 'Do you want to deploy into Prod?'
    }
}
stage('Prod') {
        node {
            dir ("${MODULE_PATH}/infra") {
                sh "./create_module_prod.sh"
                sh "./stage_build.sh qa prod";
            }
        }
}
*/

